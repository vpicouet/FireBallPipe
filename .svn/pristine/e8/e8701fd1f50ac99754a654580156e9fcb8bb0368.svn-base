{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# UV-Guider alignement with source in autocoll\n",
    "##  Field 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib notebook\n",
    "\n",
    "from __future__ import division, print_function\n",
    "\n",
    "import numpy as np\n",
    "from astropy.io import fits\n",
    "from astropy import wcs, coordinates\n",
    "from astropy import units as u\n",
    "from astropy.wcs.utils import proj_plane_pixel_scales\n",
    "from matplotlib import pyplot as plt\n",
    "from astropy.table import Table\n",
    "import matplotlib.patches as patches\n",
    "\n",
    "from guider2UV import Guider2UV\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "path_SC_GUI02 = '/home/dvibert/ownCloud/FIREBALL/Tests-at-FortSumner/170909_SC_GUI02/'\n",
    "\n",
    "mask_plate_scale = 42.26134 #mm/deg\n",
    "\n",
    "#guider center => put source on guider center\n",
    "gc = np.array([640, 540])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## calibrated frame encoder gains:\n",
    "\n",
    "EL : 0.092 x 1.00379 = 0.09469 arcsec/inc\n",
    "\n",
    "CE : 0.01 x 1.02928 = 0.010293 arcsec/inc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# encoder gains:\n",
    "\n",
    "CEg = 1.02928\n",
    "Elg = 1.00379\n",
    "\n",
    "# 2018 calibrated gains put in CNES software\n",
    "#CEg = 1.0\n",
    "#Elg = 1.0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Field 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FOV center angular position in guider <SkyCoord (SkyOffsetICRS: rotation=0.0 deg, origin=<ICRS Coordinate: (ra, dec) in deg\n",
      "    (250.39272815, 36.41856381)>): (lon, lat) in deg\n",
      "    (0.17639951, 0.0154012)>\n",
      "FOV center pixel position in guider [array(1338.56657245), array(600.7867847)]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: FITSFixedWarning: The WCS transformation has more axes (2) than the image it is associated with (0) [astropy.wcs.wcs]\n"
     ]
    }
   ],
   "source": [
    "G2UV = Guider2UV(filename=path_SC_GUI02 + 'Guider2UV_F1_nogamma.new.pkl')\n",
    "gc_coord = G2UV.GuiderP.pix2local([gc])\n",
    "\n",
    "target_filename = '/home/dvibert/ownCloud/FIREBALL/Target_selection/targets_F1.txt'\n",
    "F1 = Table.read(target_filename, format='ascii')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## compute offset from 2017 to 2018 setting"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "offset 2017 -> 2018\n",
    "\n",
    "X detector: 73pix = 92.78 arcsec -> -y mask -> -x local frame\n",
    "\n",
    "y detector: -25pix = -27.65 arcsec -> -x mask -> y local fr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "92.78299999999999 -27.650000000000002\n"
     ]
    }
   ],
   "source": [
    "print(73*1.271, -25*1.106)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "newFOV = coordinates.SkyCoord(G2UV.FOV_center_guider_coord.lon + deltax*u.deg, \n",
    "                              G2UV.FOV_center_guider_coord.lat,\n",
    "                              frame = G2UV.GuiderP.localframe)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<SkyCoord (SkyOffsetICRS: rotation=0.0 deg, origin=<ICRS Coordinate: (ra, dec) in deg\n",
       "    (250.39272815, 36.41856381)>): (lon, lat) in deg\n",
       "    (0.17639951, 0.0154012)>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "G2UV.FOV_center_guider_coord "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## slit #46"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "slit position in mm on mask: [ 6.7589561 -3.858979 ]\n",
      "slit coord in guider local frame: ['0d05m20.0898s -0d08m48.8744s']\n",
      "slit coord in guider pixel frame: [array([1004.2852669]), array([-43.44137399])]\n",
      "EL: [159.44063507] arcsec \n",
      "CE: [256.91471986] arcsec\n"
     ]
    }
   ],
   "source": [
    "#slit_pos1 =   np.array([F1[F1['Internal-count']=='30']['xmm'][0], F1[F1['Internal-count']=='30']['ymm'][0]])\n",
    "\n",
    "slit_pos1 =   np.array([F1[F1['Internal-count']=='46']['xmm'][0], F1[F1['Internal-count']=='46']['ymm'][0]])\n",
    "\n",
    "print(\"slit position in mm on mask:\", slit_pos1)\n",
    "slit_coord1 = G2UV.SienceMask2guider(slit_pos1, angle=True)\n",
    "print(\"slit coord in guider local frame:\", slit_coord1.to_string(u'dms'))\n",
    "slit_coord1_pix = G2UV.SienceMask2guider(slit_pos1, angle=False)\n",
    "print(\"slit coord in guider pixel frame:\", slit_coord1_pix)\n",
    "\n",
    "#frame move\n",
    "theta_EL =  slit_coord1.lon.deg/2./Elg\n",
    "theta_CE = -slit_coord1.lat.deg/2./CEg\n",
    "print(\"EL: {} arcsec \\nCE: {} arcsec\".format(theta_EL*3600, theta_CE*3600))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "start from guider pix: 640,540\n",
    "\n",
    "coord on diffuse 214nm:  1442x419 observé 1432,452"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-10, 33)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1432 - 1442, 452 - 419"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-10 33\n"
     ]
    }
   ],
   "source": [
    "dx_det, dy_det = 1432 - 1442, 452 - 419\n",
    "print(dx_det, dy_det)\n",
    "yscale = 1.106 # arcsec/pix spatial (y det -> y mask)\n",
    "xscale = 1.271 # arcsec/pix spectral (x det -> - x mask)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## slit #51"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "slit position in mm on mask: [8.6160157 1.0303866]\n",
      "slit coord in guider local frame: ['0d12m20.8577s -0d11m17.1902s']\n",
      "slit coord in guider pixel frame: [array([1461.61698278]), array([-187.11837729])]\n",
      "EL: [209.58959449] arcsec \n",
      "CE: [72.04836426] arcsec\n"
     ]
    }
   ],
   "source": [
    "\n",
    "slit_pos2 =   np.array([F1[F1['Internal-count']=='51']['xmm'][0], F1[F1['Internal-count']=='51']['ymm'][0]])\n",
    "\n",
    "print(\"slit position in mm on mask:\", slit_pos2)\n",
    "slit_coord2 = G2UV.SienceMask2guider(slit_pos2, angle=True)\n",
    "print(\"slit coord in guider local frame:\", slit_coord2.to_string(u'dms'))\n",
    "slit_coord2_pix = G2UV.SienceMask2guider(slit_pos2, angle=False)\n",
    "print(\"slit coord in guider pixel frame:\", slit_coord2_pix)\n",
    "\n",
    "#frame move\n",
    "theta_EL =  (slit_coord2.lon.deg - slit_coord1.lon.deg)/2./Elg\n",
    "theta_CE = -(slit_coord2.lat.deg - slit_coord1.lat.deg)/2./CEg\n",
    "print(\"EL: {} arcsec \\nCE: {} arcsec\".format(theta_EL*3600, theta_CE*3600))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "start from #46\n",
    "\n",
    "coord on dffuse: 1109 x 284 mesurée 1099 x 320"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## slit #20"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "slit position in mm on mask: [-2.6607215  5.0030701]\n",
      "slit coord in guider local frame: ['0d17m35.8893s 0d04m52.6207s']\n",
      "slit coord in guider pixel frame: [array([1783.82823689]), array([850.73918849])]\n",
      "EL: [156.9210838] arcsec \n",
      "CE: [-471.1113407] arcsec\n"
     ]
    }
   ],
   "source": [
    "slit_pos3 =   np.array([F1[F1['Internal-count']=='20']['xmm'][0], F1[F1['Internal-count']=='20']['ymm'][0]])\n",
    "\n",
    "print(\"slit position in mm on mask:\", slit_pos3)\n",
    "slit_coord3 = G2UV.SienceMask2guider(slit_pos3, angle=True)\n",
    "print(\"slit coord in guider local frame:\", slit_coord3.to_string(u'dms'))\n",
    "slit_coord3_pix = G2UV.SienceMask2guider(slit_pos3, angle=False)\n",
    "print(\"slit coord in guider pixel frame:\", slit_coord3_pix)\n",
    "\n",
    "#frame move\n",
    "theta_EL =  (slit_coord3.lon.deg - slit_coord2.lon.deg)/2./Elg\n",
    "theta_CE = -(slit_coord3.lat.deg - slit_coord2.lat.deg)/2./CEg\n",
    "print(\"EL: {} arcsec \\nCE: {} arcsec\".format(theta_EL*3600, theta_CE*3600))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "compensation hysteresis, slit #51 -> 1099 x 317\n",
    "\n",
    "start from this new #51 position to #20\n",
    "\n",
    "coord on diffuse 1218x1155 mes 1210x1188   delta 8x33"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## slit #10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "slit position in mm on mask: [-8.2399806 -3.0910898]\n",
      "slit coord in guider local frame: ['0d05m54.2545s 0d12m31.7403s']\n",
      "slit coord in guider pixel frame: [array([1050.7811762]), array([1365.9406806])]\n",
      "EL: [-349.49284175] arcsec \n",
      "CE: [-223.02948452] arcsec\n"
     ]
    }
   ],
   "source": [
    "slit_pos4 =   np.array([F1[F1['Internal-count']=='10']['xmm'][0], F1[F1['Internal-count']=='10']['ymm'][0]])\n",
    "\n",
    "print(\"slit position in mm on mask:\", slit_pos4)\n",
    "slit_coord4 = G2UV.SienceMask2guider(slit_pos4, angle=True)\n",
    "print(\"slit coord in guider local frame:\", slit_coord4.to_string(u'dms'))\n",
    "slit_coord4_pix = G2UV.SienceMask2guider(slit_pos4, angle=False)\n",
    "print(\"slit coord in guider pixel frame:\", slit_coord4_pix)\n",
    "\n",
    "#frame move\n",
    "theta_EL =  (slit_coord4.lon.deg - slit_coord3.lon.deg)/2./Elg\n",
    "theta_CE = -(slit_coord4.lat.deg - slit_coord3.lat.deg)/2./CEg\n",
    "print(\"EL: {} arcsec \\nCE: {} arcsec\".format(theta_EL*3600, theta_CE*3600))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "compensation hysteresis, slit #20 mesured: 2017x1188\n",
    "\n",
    "start from new #20 to #10\n",
    "\n",
    "coord expected 1409x1571 measured 1408x1597 delta -1, 26 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## back to guider center"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "compensation hysteresis, slit #10 now at 1404, 1597"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Guider Center in guider local frame: 0d00m00s 0d00m00s\n",
      "EL: [-176.45847162] arcsec \n",
      "CE: [365.17774111] arcsec\n"
     ]
    }
   ],
   "source": [
    "gcenter_pos_ang = G2UV.guider_to_FieldLocal(np.array([[640, 540]]))\n",
    "\n",
    "gcenter_coord = coordinates.SkyCoord(0.*u.deg, 0.*u.deg, frame=G2UV.GuiderP.localframe)\n",
    "\n",
    "#guid_star_pos_ang = coordinates.SkyCoord(star_ra*u.deg, star_dec*u.deg) \n",
    "#gcenter_coord = G2UV.SienceMask2guider(gcenter_pos_ang , angle=True) \n",
    "#gcenter_pix = G2UV.SienceMask2guider(gcenter_pos_ang , angle=False) \n",
    "\n",
    "print(\"Guider Center in guider local frame:\", gcenter_coord.to_string(u'dms'))\n",
    " \n",
    "#frame move\n",
    "theta_EL =  (gcenter_coord.lon.deg - slit_coord4.lon.deg)/2./Elg\n",
    "theta_CE = - (gcenter_coord.lat.deg - slit_coord4.lat.deg)/2./CEg\n",
    "print(\"EL: {} arcsec \\nCE: {} arcsec\".format(theta_EL*3600, theta_CE*3600))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### back to slits (with the mask, ie through slit)\n",
    "\n",
    "correct for the translation only"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "dx_det, dy_det = 1432 - 1442, 452 - 419\n",
    "#print(dx_det, dy_det)\n",
    "\n",
    "yscale = 1.106 # arcsec/pix spatial (y det -> y mask)\n",
    "xscale = 1.271 # arcsec/pix spectral (x det -> - x mask)\n",
    "\n",
    "deltax =   - dx_det*xscale/3600.\n",
    "deltay =  dy_det*yscale/3600.\n",
    "\n",
    "G2UVnew  = Guider2UV(guider_wcs=G2UV.GuiderP.w, \n",
    "                     Field_center=G2UV.FieldP.center, \n",
    "                     Field_rotation=G2UV.FieldP.rotation,\n",
    "                     mask_rotation=G2UV.mask_rotation)\n",
    "\n",
    "\n",
    "\n",
    "newFOVcenter = coordinates.SkyCoord(G2UV.FOV_center_guider_coord.lon - deltax*u.deg, \n",
    "                              G2UV.FOV_center_guider_coord.lat - deltay*u.deg,\n",
    "                              frame = G2UV.GuiderP.localframe)\n",
    "                     \n",
    "G2UVnew.FOV_center_guider_coord = newFOVcenter\n",
    "\n",
    "#G2UVnew.FOV_guider_coord = G2UV.FOV_guider_coord\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## slit #46"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "slit position in mm on mask: [ 6.7589561 -3.858979 ]\n",
      "slit coord in guider local frame: ['0d05m07.3798s -0d09m25.3724s']\n",
      "slit coord in guider pixel frame: [array([991.43696212]), array([-84.23893293])]\n",
      "EL: [153.10962958] arcsec \n",
      "CE: [274.64458928] arcsec\n"
     ]
    }
   ],
   "source": [
    "slit_pos1 =   np.array([F1[F1['Internal-count']=='46']['xmm'][0], F1[F1['Internal-count']=='46']['ymm'][0]])\n",
    "\n",
    "print(\"slit position in mm on mask:\", slit_pos1)\n",
    "slit_coord1 = G2UVnew.SienceMask2guider(slit_pos1, angle=True)\n",
    "print(\"slit coord in guider local frame:\", slit_coord1.to_string(u'dms'))\n",
    "slit_coord1_pix = G2UVnew.SienceMask2guider(slit_pos1, angle=False)\n",
    "print(\"slit coord in guider pixel frame:\", slit_coord1_pix)\n",
    "\n",
    "#frame move\n",
    "theta_EL =  slit_coord1.lon.deg/2./Elg\n",
    "theta_CE = -slit_coord1.lat.deg/2./CEg\n",
    "print(\"EL: {} arcsec \\nCE: {} arcsec\".format(theta_EL*3600, theta_CE*3600))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "measured in open mask 1442x487 => wrong correction in y\n",
    "\n",
    "measured in open mask  1439x428"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " +10 arcsec in El  1425x424\n",
    " +10 arcsec more El 1408x428"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "----------------------------"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
